//@ts-nocheck
import { GraphQLClient } from 'graphql-request';
import { RequestInit } from 'graphql-request/dist/types.dom';
import { useQuery, useMutation, UseQueryOptions, UseMutationOptions } from '@tanstack/react-query';
export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };

function fetcher<TData, TVariables>(client: GraphQLClient, query: string, variables?: TVariables, headers?: RequestInit['headers']) {
  return async (): Promise<TData> => client.request<TData, TVariables>(query, variables, headers);
}
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
};

/** Autogenerated input type of CreateSchedule */
export type CreateScheduleInput = {
  assigned?: InputMaybe<Scalars['ID']>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  date: Scalars['String'];
  random?: InputMaybe<Scalars['Boolean']>;
};

/** Autogenerated input type of CreateUser */
export type CreateUserInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  email: Scalars['String'];
  fullName: Scalars['String'];
  nickName: Scalars['String'];
  password: Scalars['String'];
};

export type Mutation = {
  __typename?: 'Mutation';
  createSchedule?: Maybe<User>;
  createUser?: Maybe<User>;
  removeScheduleById?: Maybe<Scalars['Boolean']>;
  updateSchedule?: Maybe<Schedule>;
};


export type MutationCreateScheduleArgs = {
  input: CreateScheduleInput;
};


export type MutationCreateUserArgs = {
  input: CreateUserInput;
};


export type MutationRemoveScheduleByIdArgs = {
  input: RemoveScheduleByIdInput;
};


export type MutationUpdateScheduleArgs = {
  input: UpdateScheduleInput;
};

export type Query = {
  __typename?: 'Query';
  /** Get all active users */
  getAllUsers?: Maybe<Array<User>>;
  /** schedule history by year and month */
  getScheduleHistory?: Maybe<Array<Schedule>>;
  /** Get user that is scheduled */
  getScheduledUser?: Maybe<User>;
  /** Login a user */
  login?: Maybe<Scalars['String']>;
  /** Me */
  me: User;
  /** Next user for watering */
  nextSchedule?: Maybe<Schedule>;
};


export type QueryGetScheduleHistoryArgs = {
  month: Scalars['Int'];
  year: Scalars['Int'];
};


export type QueryLoginArgs = {
  email: Scalars['String'];
  password: Scalars['String'];
};

/** Autogenerated input type of RemoveScheduleById */
export type RemoveScheduleByIdInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  scheduleId: Scalars['ID'];
};

/** Schedule */
export type Schedule = {
  __typename?: 'Schedule';
  assignedId?: Maybe<Scalars['ID']>;
  assigneeId?: Maybe<Scalars['ID']>;
  date?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  watered?: Maybe<Scalars['Boolean']>;
};

/** Autogenerated input type of UpdateSchedule */
export type UpdateScheduleInput = {
  assignedId?: InputMaybe<Scalars['ID']>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  date?: InputMaybe<Scalars['String']>;
  scheduleId: Scalars['ID'];
  watered?: InputMaybe<Scalars['Boolean']>;
};

/** Me */
export type User = {
  __typename?: 'User';
  active?: Maybe<Scalars['Boolean']>;
  email?: Maybe<Scalars['String']>;
  fullName?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  isSuperadmin?: Maybe<Scalars['Boolean']>;
  nickName?: Maybe<Scalars['String']>;
};

export type NextScheduleQueryVariables = Exact<{ [key: string]: never; }>;


export type NextScheduleQuery = { __typename?: 'Query', nextSchedule?: { __typename?: 'Schedule', id: string, date?: string | null } | null };

export type CreateScheduleMutationVariables = Exact<{
  input: CreateScheduleInput;
}>;


export type CreateScheduleMutation = { __typename?: 'Mutation', createSchedule?: { __typename?: 'User', id: string } | null };

export type GetScheduledUserQueryVariables = Exact<{ [key: string]: never; }>;


export type GetScheduledUserQuery = { __typename?: 'Query', getScheduledUser?: { __typename?: 'User', id: string, nickName?: string | null } | null };

export type UpdateScheduleMutationVariables = Exact<{
  input: UpdateScheduleInput;
}>;


export type UpdateScheduleMutation = { __typename?: 'Mutation', updateSchedule?: { __typename?: 'Schedule', id: string } | null };

export type GetScheduleHistoryQueryVariables = Exact<{
  year: Scalars['Int'];
  month: Scalars['Int'];
}>;


export type GetScheduleHistoryQuery = { __typename?: 'Query', getScheduleHistory?: Array<{ __typename?: 'Schedule', id: string, watered?: boolean | null, date?: string | null }> | null };

export type CreateUserMutationVariables = Exact<{
  input: CreateUserInput;
}>;


export type CreateUserMutation = { __typename?: 'Mutation', createUser?: { __typename?: 'User', id: string } | null };

export type MeQueryVariables = Exact<{ [key: string]: never; }>;


export type MeQuery = { __typename?: 'Query', me: { __typename?: 'User', id: string, email?: string | null, nickName?: string | null, fullName?: string | null, isSuperadmin?: boolean | null } };

export type LoginQueryVariables = Exact<{
  email: Scalars['String'];
  password: Scalars['String'];
}>;


export type LoginQuery = { __typename?: 'Query', login?: string | null };

export type GetAllUsersQueryVariables = Exact<{ [key: string]: never; }>;


export type GetAllUsersQuery = { __typename?: 'Query', getAllUsers?: Array<{ __typename?: 'User', id: string, email?: string | null, fullName?: string | null }> | null };


export const NextScheduleDocument = `
    query nextSchedule {
  nextSchedule {
    id
    date
  }
}
    `;
export const useNextScheduleQuery = <
      TData = NextScheduleQuery,
      TError = unknown
    >(
      client: GraphQLClient,
      variables?: NextScheduleQueryVariables,
      options?: UseQueryOptions<NextScheduleQuery, TError, TData>,
      headers?: RequestInit['headers']
    ) =>
    useQuery<NextScheduleQuery, TError, TData>(
      variables === undefined ? ['nextSchedule'] : ['nextSchedule', variables],
      fetcher<NextScheduleQuery, NextScheduleQueryVariables>(client, NextScheduleDocument, variables, headers),
      options
    );
export const CreateScheduleDocument = `
    mutation createSchedule($input: CreateScheduleInput!) {
  createSchedule(input: $input) {
    id
  }
}
    `;
export const useCreateScheduleMutation = <
      TError = unknown,
      TContext = unknown
    >(
      client: GraphQLClient,
      options?: UseMutationOptions<CreateScheduleMutation, TError, CreateScheduleMutationVariables, TContext>,
      headers?: RequestInit['headers']
    ) =>
    useMutation<CreateScheduleMutation, TError, CreateScheduleMutationVariables, TContext>(
      ['createSchedule'],
      (variables?: CreateScheduleMutationVariables) => fetcher<CreateScheduleMutation, CreateScheduleMutationVariables>(client, CreateScheduleDocument, variables, headers)(),
      options
    );
export const GetScheduledUserDocument = `
    query getScheduledUser {
  getScheduledUser {
    id
    nickName
  }
}
    `;
export const useGetScheduledUserQuery = <
      TData = GetScheduledUserQuery,
      TError = unknown
    >(
      client: GraphQLClient,
      variables?: GetScheduledUserQueryVariables,
      options?: UseQueryOptions<GetScheduledUserQuery, TError, TData>,
      headers?: RequestInit['headers']
    ) =>
    useQuery<GetScheduledUserQuery, TError, TData>(
      variables === undefined ? ['getScheduledUser'] : ['getScheduledUser', variables],
      fetcher<GetScheduledUserQuery, GetScheduledUserQueryVariables>(client, GetScheduledUserDocument, variables, headers),
      options
    );
export const UpdateScheduleDocument = `
    mutation updateSchedule($input: UpdateScheduleInput!) {
  updateSchedule(input: $input) {
    id
  }
}
    `;
export const useUpdateScheduleMutation = <
      TError = unknown,
      TContext = unknown
    >(
      client: GraphQLClient,
      options?: UseMutationOptions<UpdateScheduleMutation, TError, UpdateScheduleMutationVariables, TContext>,
      headers?: RequestInit['headers']
    ) =>
    useMutation<UpdateScheduleMutation, TError, UpdateScheduleMutationVariables, TContext>(
      ['updateSchedule'],
      (variables?: UpdateScheduleMutationVariables) => fetcher<UpdateScheduleMutation, UpdateScheduleMutationVariables>(client, UpdateScheduleDocument, variables, headers)(),
      options
    );
export const GetScheduleHistoryDocument = `
    query getScheduleHistory($year: Int!, $month: Int!) {
  getScheduleHistory(year: $year, month: $month) {
    id
    watered
    date
  }
}
    `;
export const useGetScheduleHistoryQuery = <
      TData = GetScheduleHistoryQuery,
      TError = unknown
    >(
      client: GraphQLClient,
      variables: GetScheduleHistoryQueryVariables,
      options?: UseQueryOptions<GetScheduleHistoryQuery, TError, TData>,
      headers?: RequestInit['headers']
    ) =>
    useQuery<GetScheduleHistoryQuery, TError, TData>(
      ['getScheduleHistory', variables],
      fetcher<GetScheduleHistoryQuery, GetScheduleHistoryQueryVariables>(client, GetScheduleHistoryDocument, variables, headers),
      options
    );
export const CreateUserDocument = `
    mutation createUser($input: CreateUserInput!) {
  createUser(input: $input) {
    id
  }
}
    `;
export const useCreateUserMutation = <
      TError = unknown,
      TContext = unknown
    >(
      client: GraphQLClient,
      options?: UseMutationOptions<CreateUserMutation, TError, CreateUserMutationVariables, TContext>,
      headers?: RequestInit['headers']
    ) =>
    useMutation<CreateUserMutation, TError, CreateUserMutationVariables, TContext>(
      ['createUser'],
      (variables?: CreateUserMutationVariables) => fetcher<CreateUserMutation, CreateUserMutationVariables>(client, CreateUserDocument, variables, headers)(),
      options
    );
export const MeDocument = `
    query me {
  me {
    id
    email
    nickName
    fullName
    isSuperadmin
  }
}
    `;
export const useMeQuery = <
      TData = MeQuery,
      TError = unknown
    >(
      client: GraphQLClient,
      variables?: MeQueryVariables,
      options?: UseQueryOptions<MeQuery, TError, TData>,
      headers?: RequestInit['headers']
    ) =>
    useQuery<MeQuery, TError, TData>(
      variables === undefined ? ['me'] : ['me', variables],
      fetcher<MeQuery, MeQueryVariables>(client, MeDocument, variables, headers),
      options
    );
export const LoginDocument = `
    query login($email: String!, $password: String!) {
  login(email: $email, password: $password)
}
    `;
export const useLoginQuery = <
      TData = LoginQuery,
      TError = unknown
    >(
      client: GraphQLClient,
      variables: LoginQueryVariables,
      options?: UseQueryOptions<LoginQuery, TError, TData>,
      headers?: RequestInit['headers']
    ) =>
    useQuery<LoginQuery, TError, TData>(
      ['login', variables],
      fetcher<LoginQuery, LoginQueryVariables>(client, LoginDocument, variables, headers),
      options
    );
export const GetAllUsersDocument = `
    query getAllUsers {
  getAllUsers {
    id
    email
    fullName
  }
}
    `;
export const useGetAllUsersQuery = <
      TData = GetAllUsersQuery,
      TError = unknown
    >(
      client: GraphQLClient,
      variables?: GetAllUsersQueryVariables,
      options?: UseQueryOptions<GetAllUsersQuery, TError, TData>,
      headers?: RequestInit['headers']
    ) =>
    useQuery<GetAllUsersQuery, TError, TData>(
      variables === undefined ? ['getAllUsers'] : ['getAllUsers', variables],
      fetcher<GetAllUsersQuery, GetAllUsersQueryVariables>(client, GetAllUsersDocument, variables, headers),
      options
    );
